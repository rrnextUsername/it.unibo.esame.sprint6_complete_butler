/* Generated by AN DISI Unibo */ 
package it.unibo.butler_pathfinder_handler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler_pathfinder_handler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('locationIndex.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t09",targetState="handleMovement",cond=whenDispatch("move"))
					transition(edgeName="t010",targetState="assertMove",cond=whenDispatch("goalReached"))
				}	 
				state("handleMovement") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("move(DESTINATION)"), Term.createTerm("move(DESTINATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("location(${payloadArg(0)},X,Y)","") //set resVar	
								forward("setGoal", "setGoal(${getCurSol("X").toString()},${getCurSol("Y").toString()})" ,"pathfinder" ) 
								solve("assert(movingTo(${payloadArg(0)}))","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("assertMove") { //this:State
					action { //it:State
						solve("retract(movingTo(DEST))","") //set resVar	
						val Dest= getCurSol("DEST")
						solve("assert(done(movimento,$Dest))","") //set resVar	
						forward("actionComplete", "actionComplete(ok)" ,"butler_solver" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
