/* Generated by AN DISI Unibo */ 
package it.unibo.butler_solver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler_solver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var messageRecognized: Boolean= false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('roomState.pl')","") //set resVar	
						solve("consult('cmds.pl')","") //set resVar	
						solve("consult('solverModel.pl')","") //set resVar	
						solve("consult('dataFunctions.pl')","") //set resVar	
						solve("showRoomState","") //set resVar	
						solve("inventario(tableInv,L)","") //set resVar	
						var TableInv = getCurSol("L").toString()
						solve("inventario(butlerInv,L)","") //set resVar	
						var ButlerInv = getCurSol("L").toString()
						solve("inventario(pantryInv,L)","") //set resVar	
						var PantryInv = getCurSol("L").toString()
						solve("inventario(dishwasherInv,L)","") //set resVar	
						var DishwasherInv = getCurSol("L").toString()
						itunibo.robot.resourceModelSupport.updateRoomModel(myself ,"tableInv", TableInv )
						itunibo.robot.resourceModelSupport.updateRoomModel(myself ,"butlerInv", ButlerInv )
						itunibo.robot.resourceModelSupport.updateRoomModel(myself ,"pantryInv", PantryInv )
						itunibo.robot.resourceModelSupport.updateRoomModel(myself ,"dishwasherInv", DishwasherInv )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						solve("aggiornaStato(waitCmd,waiting,waiting)","") //set resVar	
					}
					 transition(edgeName="t00",targetState="solveCmd",cond=whenDispatch("cmd"))
				}	 
				state("solveCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(CMD,ARG1)"), Term.createTerm("cmd(CMD,ARG1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("aggiornaStato(solveCmd,${payloadArg(0)},${payloadArg(1)})","") //set resVar	
								solve("comando(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
								println(currentSolution)
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("solveAction") { //this:State
					action { //it:State
						solve("showSolverState","") //set resVar	
						solve("retract(azione(ACTION,ARG1,ARG2,ARG3,ARG4))","") //set resVar	
						println(currentSolution)
						if(currentSolution.isSuccess()){ val Action= currentSolution.getVarValue("ACTION").toString()
						if(Action == "notificaFrigo" ){ forward("msgFridge", "msgFridge(${getCurSol("ARG1").toString()},${getCurSol("ARG2").toString()},${getCurSol("ARG3").toString()})" ,"butler_fridge_handler" ) 
						 }
						if(Action == "aggiungiOggetto" ){ forward("add", "add(${getCurSol("ARG1").toString()},${getCurSol("ARG2").toString()},${getCurSol("ARG3").toString()})" ,"butler_solver" ) 
						 }
						if(Action == "spostaOggetto" ){ forward("swap", "swap(${getCurSol("ARG1").toString()},${getCurSol("ARG2").toString()},${getCurSol("ARG3").toString()},${getCurSol("ARG4").toString()})" ,"butler_solver" ) 
						 }
						if(Action == "rimuoviOggetto" ){ forward("remove", "remove(${getCurSol("ARG1").toString()},${getCurSol("ARG2").toString()},${getCurSol("ARG3").toString()})" ,"butler_solver" ) 
						 }
						if(Action == "movimento" ){ forward("move", "move(${getCurSol("ARG1").toString()})" ,"butler_pathfinder_handler" ) 
						 }
						if(Action == "check" ){ forward("check", "check(${getCurSol("ARG1").toString()})" ,"butler_test_handler" ) 
						 }
						if(Action == "wait" ){ forward("wait", "wait(${getCurSol("ARG1").toString()})" ,"butler_test_handler" ) 
						 }
						if(Action == "continuaPiano" ){ forward("actionContinue", "actionContinue(${getCurSol("ARG1").toString()},${getCurSol("ARG2").toString()})" ,"butler_solver" ) 
						 }
						 }
						else
						 { forward("allActionsDone", "allActiobutler_solver" ,"butler_solver" ) 
						  }
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t01",targetState="handleAddAction",cond=whenDispatch("add"))
					transition(edgeName="t02",targetState="handleRemoveAction",cond=whenDispatch("remove"))
					transition(edgeName="t03",targetState="handleSwapAction",cond=whenDispatch("swap"))
					transition(edgeName="t04",targetState="stoppedSolvedAction",cond=whenEvent("stopAppl"))
					transition(edgeName="t05",targetState="completeAction",cond=whenDispatch("actionComplete"))
					transition(edgeName="t06",targetState="completeAction",cond=whenDispatch("actionContinue"))
					transition(edgeName="t07",targetState="waitCmd",cond=whenDispatch("allActionsDone"))
				}	 
				state("handleAddAction") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("add(INVENTORY,NAME,CATEGORY)"), Term.createTerm("add(INVENTARIO,NOME,CATEGORIA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("aggiungi(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)})","") //set resVar	
								solve("assert(done(handleAdd,${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("inventario(${payloadArg(0)},L)","") //set resVar	
								var Inv = getCurSol("L").toString()
								itunibo.robot.resourceModelSupport.updateRoomModel(myself ,payloadArg(1), Inv )
								solve("showRoomState","") //set resVar	
								forward("actionComplete", "actionComplete(ok)" ,"butler_solver" ) 
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleSwapAction") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("swap(INVENTORY1,INVENTORY2,NAME,CATEGORY)"), Term.createTerm("swap(INVENTARIO1,INVENTARIO2,NOME,CATEGORIA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("sposta(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)},${payloadArg(3)})","") //set resVar	
								solve("assert(done(handleSwap,${payloadArg(0)},${payloadArg(1)},${payloadArg(2)},${payloadArg(3)}))","") //set resVar	
								solve("inventario(${payloadArg(0)},L)","") //set resVar	
								var Inv = getCurSol("L").toString()
								itunibo.robot.resourceModelSupport.updateRoomModel(myself ,payloadArg(0), Inv )
								solve("inventario(${payloadArg(1)},L)","") //set resVar	
								Inv = getCurSol("L").toString()
								itunibo.robot.resourceModelSupport.updateRoomModel(myself ,payloadArg(1), Inv )
								solve("showRoomState","") //set resVar	
								forward("actionComplete", "actionComplete(ok)" ,"butler_solver" ) 
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleRemoveAction") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("remove(INVENTORY,NAME,CATEGORY)"), Term.createTerm("remove(INVENTARIO,NOME,CATEGORIA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								messageRecognized=true
								solve("rimuovi(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)})","") //set resVar	
								solve("assert(done(handleRemove,${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("inventario(${payloadArg(0)},L)","") //set resVar	
								var Inv = getCurSol("L").toString()
								itunibo.robot.resourceModelSupport.updateRoomModel(myself ,payloadArg(1), Inv )
								solve("showRoomState","") //set resVar	
								forward("actionComplete", "actionComplete(ok)" ,"butler_solver" ) 
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("completeAction") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("actionComplete(STATUS)"), Term.createTerm("actionComplete(ok)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
						}
						if( checkMsgContent( Term.createTerm("actionComplete(STATUS)"), Term.createTerm("actionComplete(fail)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("retractAllActions","") //set resVar	
								solve("assert(azione(movimento,home,null,null,null))","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("actionContinue(CMD,ARG1)"), Term.createTerm("actionContinue(CMD,ARG1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("continua(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
								println(currentSolution)
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("stoppedSolvedAction") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("aggiornaStato(stoppedSolvedAction)","") //set resVar	
					}
					 transition(edgeName="t08",targetState="restartSolvedAction",cond=whenEvent("reactivateAppl"))
				}	 
				state("restartSolvedAction") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("assert(done(restartSolvedAction))","") //set resVar	
						solve("aggiornaStato(restartSolvedAction)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
