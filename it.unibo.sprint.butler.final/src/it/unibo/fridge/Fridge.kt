/* Generated by AN DISI Unibo */ 
package it.unibo.fridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridge ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('fridgeModel.pl')","") //set resVar	
						solve("consult('dataFunctions.pl')","") //set resVar	
						solve("showResourceModel","") //set resVar	
						emit("exposeFood", "exposeFood" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t031",targetState="handleMsgFridge",cond=whenEvent("msgFridge"))
					transition(edgeName="t032",targetState="exposeFood",cond=whenEvent("exposeFood"))
				}	 
				state("handleMsgFridge") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEGORY)"), Term.createTerm("msgFridge(aggiungi,NAME,CATEGORY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("aggiungi(frigoInv,${payloadArg(1)},${payloadArg(2)})","") //set resVar	
								solve("assert(done(handleAdd,${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("showResourceModel","") //set resVar	
								solve("inventario(frigoInv,L)","") //set resVar	
								val Inventario = getCurSol("L").toString()
								itunibo.robot.resourceModelSupport.updateFridgeModel(myself ,Inventario )
								replyToCaller("replyFridge", "replyFridge(null)")
						}
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEGORY)"), Term.createTerm("msgFridge(rimuovi,NAME,CATEGORY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("rimuovi(frigoInv,${payloadArg(1)},${payloadArg(2)})","") //set resVar	
								solve("assert(done(handleRemove,${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("showResourceModel","") //set resVar	
								solve("inventario(frigoInv,L)","") //set resVar	
								val Inventario = getCurSol("L").toString()
								itunibo.robot.resourceModelSupport.updateFridgeModel(myself ,Inventario )
								replyToCaller("replyFridge", "replyFridge(null)")
						}
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEGORY)"), Term.createTerm("msgFridge(conferma,NAME,CATEGORY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("assert(done(handleQuery,${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								solve("presenza(frigoInv,${payloadArg(1)},${payloadArg(2)})","") //set resVar	
								if(currentSolution.isSuccess()) { replyToCaller("replyFridge", "replyFridge(present)")
								 }
								else
								{ replyToCaller("replyFridge", "replyFridge(absent)")
								 }
						}
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEGORY)"), Term.createTerm("msgFridge(null,NAME,CATEGORY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								replyToCaller("replyFridge", "replyFridge(null})")
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("exposeFood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("exposeFood"), Term.createTerm("exposeFood"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(exposeFood))","") //set resVar	
								solve("inventario(frigoInv,INVENTORY)","") //set resVar	
								solve("inventario(frigoInv,L)","") //set resVar	
								val Inventario = getCurSol("L").toString()
								itunibo.robot.resourceModelSupport.updateFridgeModel(myself ,Inventario )
								emit("modelContent", "modelContent(frigo(Inventario))" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
